#################################################################################
# Licensed to the .NET Foundation under one or more agreements.                 #
# The .NET Foundation licenses this file to you under the MIT license.          #
# See the LICENSE file in the project root for more information.                #
#################################################################################
parameters:
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

- name: targetFrameworks
  displayName: 'Target Frameworks on Windows'
  type: object
  default: [net462, net8.0, net9.0]

- name: targetFrameworksLinux
  displayName: 'Target Frameworks on Non-Windows'
  type: object
  default: [net8.0, net9.0]

- name: netcoreVersionTestUtils
  displayName: 'Netcore Version for Test Utilities'
  type: object
  default: net9.0

- name: buildPlatforms
  displayName: 'Build Platforms on Windows'
  type: object
  default: [AnyCPU]

- name: testSets
  displayName: 'Test Sets'
  type: object
  default: [1, 2, 3]

- name: useManagedSNI
  displayName: |
    Use Managed/Native SNI on Windows,
    values [false, true], [false] or [true] are allowed
  type: object
  default: [false, true]

- name: codeCovTargetFrameworks
  displayName: 'Code Coverage Target Frameworks'
  type: object
  default: [net462, net8.0]

- name: buildType
  displayName: 'Build Type'
  default: Project
  values:
    - Project
    - Package

- name: defaultPoolName
  type: string
  default: $(ci_var_defaultPoolName)

variables:
  - template: libraries/ci-build-variables.yml@self

  - name: artifactName
    value: Artifacts

  - name: defaultHostedPoolName
    value: 'Azure Pipelines'

stages:
  - stage: build_nugets
    displayName: 'Build NuGet Packages'
    jobs:
    - template: common/templates/jobs/ci-build-nugets-job.yml@self
      parameters:
        artifactName: $(artifactName)

  - template: common/templates/stages/ci-run-tests-stage.yml@self
    parameters:
      debug: ${{ parameters.debug }}
      buildType: ${{ parameters.buildType }}
      ${{ if eq(parameters.buildType, 'Package') }}:
        dependsOn: build_nugets

      prebuildSteps: # steps to run prior to building and running tests on each job
      - template: common/templates/steps/ci-prebuild-step.yml@self
        parameters:
          debug: ${{ parameters.debug }}
          artifactName: $(artifactName)
          buildType: ${{ parameters.buildType }}

      ${{ if eq(parameters.buildType, 'Project') }}: # only run the code coverage job if the build type is project
        postTestJobs: # jobs to run after the tests are done
        - template: common/templates/jobs/ci-code-coverage-job.yml@self
          parameters:
            debug: ${{ parameters.debug }}
            downloadArtifactsSteps:
              - ${{ each targetFramework in parameters.codeCovTargetFrameworks }}:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Coverage Reports [${{ targetFramework }}]'
                  inputs:
                    itemPattern: '**\${{ targetFramework }}*'
                    ${{ if contains(targetFramework, 'net4') }}:
                      targetPath: '$(Build.SourcesDirectory)\coverageNetFx'
                    ${{ else }}:
                      targetPath: '$(Build.SourcesDirectory)\coverageNetCore'

# test stages configurations
  # self hosted SQL Server on Windows
      testConfigurations:
        # Self hosted SQL Server on Mac
        mac_sql_22:
          pool: $(defaultHostedPoolName)
          hostedPool: true
          images:
            MacOSLatest_Sql22: macos-latest
          TargetFrameworks: ${{parameters.targetFrameworksLinux }}
          netcoreVersionTestUtils: ${{parameters.netcoreVersionTestUtils }}
          buildPlatforms: [AnyCPU]
          testSets: ${{parameters.testSets }}
          useManagedSNI: [true]
          codeCovTargetFrameworks: ${{parameters.codeCovTargetFrameworks }}
          configSqlFor: local
          operatingSystem: Mac
          configProperties:
            # config.json properties
            TCPConnectionString: $(SQL_TCP_CONN_STRING)
            NPConnectionString: $(SQL_NP_CONN_STRING)
            SupportsIntegratedSecurity: false
            ManagedIdentitySupported: false
            LocalDbAppName: $(LocalDbAppName)
            LocalDbSharedInstanceName: $(LocalDbSharedInstanceName)
